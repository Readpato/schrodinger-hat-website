/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch"
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: "sanity.imagePalette"
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions"
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: "sanity.fileAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Video = {
  _id: string
  _type: "video"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  shortTitle?: string
  slug?: Slug
  authors?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "author"
  }>
  youtubeId?: string
  thumbnail?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  whyShouldWatch?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  tags?: Array<string>
  publishedAt?: string
  categories?: Array<string>
  featured?: boolean
  order?: number
}

export type TeamMember = {
  _id: string
  _type: "teamMember"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  surname?: string
  role?: string
  githubUrl?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    backgroundColor?: string
    _type: "image"
  }
  orderRank?: string
}

export type Project = {
  _id: string
  _type: "project"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  sortIndex?: number
  slug?: Slug
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  url?: string
  repositoryUrl?: string
  showStars?: boolean
  techStack?: Array<string>
  launchedAt?: string
  lookingFor?: Array<string>
  language?: "typescript" | "javascript" | "python" | "go" | "rust"
  maintainers?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "teamMember"
  }>
}

export type Page = {
  _id: string
  _type: "page"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  publishedAt?: string
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: "span"
          _key: string
        }>
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
        listItem?: "bullet" | "number"
        markDefs?: Array<{
          href?: string
          _type: "link"
          _key: string
        }>
        level?: number
        _type: "block"
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: "reference"
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: "image"
        _key: string
      }
  >
  headerImage?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  seo?: {
    metaTitle?: string
    metaDescription?: string
    metaKeywords?: Array<string>
  }
}

export type JobPost = {
  _id: string
  _type: "jobPost"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  location?: string
  effort?: "low" | "moderate" | "elevate"
  isActive?: boolean
  publishedAt?: string
}

export type Faq = {
  _id: string
  _type: "faq"
  _createdAt: string
  _updatedAt: string
  _rev: string
  question?: string
  answer?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  groupKey?: string
  orderRank?: string
}

export type Event = {
  _id: string
  _type: "event"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  series?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "eventSeries"
  }
  slug?: Slug
  organiser?: string
  abstract?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  cover?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  background?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  cardImage?: "background" | "cover"
  location?: {
    name?: string
    address?: string
    city?: string
    coordinates?: Geopoint
  }
  eventPeriod?: {
    startDate?: string
    endDate?: string
  }
  cta?: {
    text?: string
    url?: string
  }
  coolBecause?: Array<string>
  authors?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "author"
  }>
}

export type Geopoint = {
  _type: "geopoint"
  lat?: number
  lng?: number
  alt?: number
}

export type EventSeries = {
  _id: string
  _type: "eventSeries"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
}

export type EventCode = {
  _id: string
  _type: "eventCode"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  code?: string
  description?: string
  url?: string
  date?: string
  partner?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "partner"
  }
  validFrom?: string
  validThru?: string
}

export type Partner = {
  _id: string
  _type: "partner"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  description?: string
  isBusinessPartner?: boolean
  businessTier?: "silver" | "gold" | "platinum" | "diamond"
  nonBusinessType?: "community" | "media"
  website?: string
  partnershipPeriod?: {
    startDate?: string
    endDate?: string
  }
  contact?: {
    name?: string
    email?: string
  }
  orderRank?: string
  visibility?: Array<string>
}

export type BlogPost = {
  _id: string
  _type: "blogPost"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  authors?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "author"
  }>
  excerpt?: string
  headerImage?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    _type: "image"
  }
  publishedAt?: string
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: "span"
          _key: string
        }>
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
        listItem?: "bullet" | "number"
        markDefs?: Array<{
          href?: string
          _type: "link"
          _key: string
        }>
        level?: number
        _type: "block"
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: "reference"
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        caption?: string
        _type: "image"
        _key: string
      }
    | ({
        _key: string
      } & Code)
  >
}

export type Author = {
  _id: string
  _type: "author"
  _createdAt: string
  _updatedAt: string
  _rev: string
  firstName?: string
  lastName?: string
  pronouns?: string
  title?: string
  photo?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  biography?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  slug?: Slug
}

export type Slug = {
  _type: "slug"
  current?: string
  source?: string
}

export type SanityImageCrop = {
  _type: "sanity.imageCrop"
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot"
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: "sanity.imageAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData"
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata"
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Code = {
  _type: "code"
  language?: string
  filename?: string
  code?: string
  highlightedLines?: Array<number>
}

export type Color = {
  _type: "color"
  hex?: string
  alpha?: number
  hsl?: HslaColor
  hsv?: HsvaColor
  rgb?: RgbaColor
}

export type RgbaColor = {
  _type: "rgbaColor"
  r?: number
  g?: number
  b?: number
  a?: number
}

export type HsvaColor = {
  _type: "hsvaColor"
  h?: number
  s?: number
  v?: number
  a?: number
}

export type HslaColor = {
  _type: "hslaColor"
  h?: number
  s?: number
  l?: number
  a?: number
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Video
  | TeamMember
  | Project
  | Page
  | JobPost
  | Faq
  | Event
  | Geopoint
  | EventSeries
  | EventCode
  | Partner
  | BlogPost
  | Author
  | Slug
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Code
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./queries/eventCodes.ts
// Variable: eventCodesQuery
// Query: *[_type == "eventCode" && validThru >= now()] {    _id,    name,    description,    url,    date,    code,    partner->{      name,      image {        "dimensions": asset->metadata.dimensions,        "url": asset->url,        backgroundColor        }      },    validFrom,    validThru,  }
export type EventCodesQueryResult = Array<{
  _id: string
  name: string | null
  description: string | null
  url: string | null
  date: string | null
  code: string | null
  partner: {
    name: string | null
    image: {
      dimensions: SanityImageDimensions | null
      url: string | null
      backgroundColor: null
    } | null
  } | null
  validFrom: string | null
  validThru: string | null
}>

// Source: ./queries/projects.ts
// Variable: projectsQuery
// Query: *[_type == "project"] | order(sortIndex asc) {    ...,    maintainers[]->{      _id,      name,      surname,      role,      githubUrl,      image {        "dimensions": asset->metadata.dimensions,        "url": asset->url,        backgroundColor      }    }  }
export type ProjectsQueryResult = Array<{
  _id: string
  _type: "project"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  sortIndex?: number
  slug?: Slug
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  url?: string
  repositoryUrl?: string
  showStars?: boolean
  techStack?: Array<string>
  launchedAt?: string
  lookingFor?: Array<string>
  language?: "go" | "javascript" | "python" | "rust" | "typescript"
  maintainers: Array<{
    _id: string
    name: string | null
    surname: string | null
    role: string | null
    githubUrl: string | null
    image: {
      dimensions: SanityImageDimensions | null
      url: string | null
      backgroundColor: string | null
    } | null
  }> | null
}>

// Query TypeMap
import "@sanity/client"
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == "eventCode" && validThru >= now()] {\n    _id,\n    name,\n    description,\n    url,\n    date,\n    code,\n    partner->{\n      name,\n      image {\n        "dimensions": asset->metadata.dimensions,\n        "url": asset->url,\n        backgroundColor\n        }\n      },\n    validFrom,\n    validThru,\n  }\n': EventCodesQueryResult
    '*[_type == "project"] | order(sortIndex asc) {\n    ...,\n    maintainers[]->{\n      _id,\n      name,\n      surname,\n      role,\n      githubUrl,\n      image {\n        "dimensions": asset->metadata.dimensions,\n        "url": asset->url,\n        backgroundColor\n      }\n    }\n  }': ProjectsQueryResult
  }
}
